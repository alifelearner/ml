sudo ARCHFLAGS="-Wno-error=unused-command-line-argument-hard-error-in-future" easy_install line_profiler


kernprof.py -l -v handle.py
Wrote profile results to handle.py.lprof
Timer unit: 1e-06 s

File: handle.py
Function: draw_date at line 17
Total time: 5.77839 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    17                                           @profile
    18                                           def draw_date(files):
    19         1            1      1.0      0.0      x = []
    20         1            1      1.0      0.0      y = []
    21         1      2381188 2381188.0     41.2      mwcs = pd.get_minutes_counts_with_id(files)
    22        61           32      0.5      0.0      for mwc in mwcs:
    23        60           43      0.7      0.0          x.append(mwc[0])
    24        60           40      0.7      0.0          y.append(mwc[1])
    25
    26         1      3397081 3397081.0     58.8      simple_draw(files, mwcs)


Wrote profile results to handle.py.lprof
Timer unit: 1e-06 s

File: parse_data.py
Function: handle_json at line 15
Total time: 2.40157 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    15                                           @profile
    16                                           def handle_json(jsonfile):
    17         1           19     19.0      0.0      f = open(jsonfile, "r")
    18         1            1      1.0      0.0      dataarray = []
    19         1            1      1.0      0.0      datacount = 0
    20
    21      4185        11605      2.8      0.5      for line in open(jsonfile):
    22      4184        48394     11.6      2.0          line = f.readline()
    23      4184       249621     59.7     10.4          lin = json.loads(line)
    24      4184      2082951    497.8     86.7          date = dateutil.parser.parse(lin["created_at"])
    25      4184         4375      1.0      0.2          datacount += 1
    26      4184         4594      1.1      0.2          dataarray.append(date.minute)
    27
    28         1            8      8.0      0.0      f.close()
    29         1            1      1.0      0.0      return datacount, dataarray


kernprof.py -l -v handle.py
[6570, 7420, 11274, 12073, 12160, 12378, 12897, 8474, 7984, 12933, 13504, 13763, 13544, 12940, 7119, 7346, 13412, 14008, 12555]
	Wrote profile results to handle.py.lprof
	Timer unit: 1e-06 s

	File: parse_data.py
	Function: handle_json at line 15
	Total time: 127.332 s

	Line #      Hits         Time  Per Hit   % Time  Line Contents
	==============================================================
	    15                                           @profile
	    16                                           def handle_json(jsonfile):
	    17        19          636     33.5      0.0      f = open(jsonfile, "r")
	    18        19           21      1.1      0.0      dataarray = []
	    19        19           16      0.8      0.0      datacount = 0
	    20
	    21    212373       730344      3.4      0.6      for line in open(jsonfile):
	    22    212354      2826826     13.3      2.2          line = f.readline()
	    23    212354     13848171     65.2     10.9          lin = json.loads(line)
	    24    212354    109427317    515.3     85.9          date = dateutil.parser.parse(lin["created_at"])
	    25    212354       238112      1.1      0.2          datacount += 1
	    26    212354       260227      1.2      0.2          dataarray.append(date.minute)
	    27
	    28        19          349     18.4      0.0      f.close()
	    29        19           20      1.1      0.0      return datacount, dataarray

time python handle.py

real	0m43.411s
user	0m39.226s
sys	0m0.618s





Filename: parse_data.py
	
Line #    Mem usage    Increment   Line Contents
================================================
    13   39.930 MiB    0.000 MiB   @profile
    14                             def handle_json(jsonfile):
    15   39.930 MiB    0.000 MiB       f = open(jsonfile, "r")
    16   39.930 MiB    0.000 MiB       dataarray = []
    17   39.930 MiB    0.000 MiB       datacount = 0
    18
    19   40.055 MiB    0.125 MiB       for line in open(jsonfile):
    20   40.055 MiB    0.000 MiB           line = f.readline()
    21   40.066 MiB    0.012 MiB           lin = json.loads(line)
    22   40.055 MiB   -0.012 MiB           date = dateutil.parser.parse(lin["created_at"])
    23   40.055 MiB    0.000 MiB           datacount += 1
    24   40.055 MiB    0.000 MiB           dataarray.append(date.minute)
    25
    26                                 f.close()
    27                                 return datacount, dataarray


function                   8259
dict                       2137
tuple                      1949
wrapper_descriptor         1625
list                       1586
weakref                    1145
builtin_function_or_method 1117
method_descriptor          948
getset_descriptor          708
type                       705